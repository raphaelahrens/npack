use crate::{Error, Result};

use std::env;
use std::fmt;
use std::fs::{self, File};
use std::io::{Read, Write};
use std::path::{Path, PathBuf};
use std::process;

use lazy_static::lazy_static;
use yaml_rust::yaml::Hash;
use yaml_rust::{Yaml, YamlEmitter, YamlLoader};

const PACK_PLUGIN_FILE: &str = "_pack.vim";
const PLUGIN_HEADER: &str = "\" Generated by pack. DO NOT EDIT!

scriptencoding utf-8

function! s:do_cmd(cmd, bang, start, end, args)
    exec printf('%s%s%s %s', (a:start == a:end ? '' : (a:start.','.a:end)), a:cmd, a:bang, a:args)
endfunction
";

const PACKFILE_HEADER: &[u8] = b"# vim: ft=yaml
#
# Generated by pack.

";

lazy_static! {
    static ref BASE_DIR: PathBuf = env::var("VIM_CONFIG_PATH")
        .map(PathBuf::from)
        .unwrap_or_else(|_| {
            let home = dirs::home_dir().expect("No home directory found");
            home.join(".config").join("nvim")
        });
    static ref PACK_DIR: PathBuf = (*BASE_DIR).join("pack");
    static ref PACK_CONFIG_DIR: PathBuf = (*BASE_DIR).join(".pack");
    static ref PACK_FILE: PathBuf = (*PACK_CONFIG_DIR).join("packfile");
    static ref PACK_PLUGIN_DIR: PathBuf = (*BASE_DIR).join("plugin");
}

#[derive(Debug, Clone)]
pub struct Package {
    pub name: String,
    pub category: String,
    pub opt: bool,
    /// Load this package on this command
    pub branch: Option<String>,
    /// Load this package on this command
    pub load_command: Option<String>,
    /// Load this package for these types
    pub for_types: Vec<String>,
    /// Build command for this package
    pub build_command: Option<String>,
    /// Local plugin
    pub local: bool,
}

impl Package {
    pub fn new(name: &str, category: &str, opt: bool) -> Package {
        Package {
            name: name.to_string(),
            category: category.to_string(),
            branch: None,
            opt,
            load_command: None,
            for_types: Vec::new(),
            build_command: None,
            local: false,
        }
    }

    pub fn is_installed(&self) -> bool {
        self.path().is_dir()
    }

    pub fn set_category<T: Into<String>>(&mut self, cat: T) {
        self.category = cat.into();
    }

    pub fn set_opt(&mut self, opt: bool) {
        self.opt = opt;
    }

    pub fn set_load_command(&mut self, cmd: &str) {
        self.load_command = Some(cmd.to_string())
    }

    pub fn set_branch(&mut self, branch_name: &str) {
        self.branch = Some(branch_name.to_string())
    }

    pub fn set_types(&mut self, types: Vec<String>) {
        self.for_types = types
    }

    pub fn set_build_command(&mut self, cmd: &str) {
        self.build_command = Some(cmd.to_string())
    }

    pub fn from_yaml(doc: &Yaml) -> Result<Package> {
        let name = doc["name"]
            .as_str()
            .map(|s| s.to_string())
            .ok_or(Error::Format)?;
        let opt = doc["opt"].as_bool().ok_or(Error::Format)?;
        let category = doc["category"]
            .as_str()
            .map(|s| s.to_string())
            .ok_or(Error::Format)?;
        let branch = doc["branch"].as_str().map(|s| s.to_string());
        let cmd = doc["on"].as_str().map(|s| s.to_string());
        let build = doc["build"].as_str().map(|s| s.to_string());
        let is_local = doc["local"].as_bool().unwrap_or(false);

        let types = match doc["for"].as_vec() {
            Some(f) => {
                let mut types = Vec::with_capacity(f.len());
                for e in f {
                    types.push(e.as_str().map(|s| s.to_string()).ok_or(Error::Format)?);
                }
                types
            }
            None => vec![],
        };

        Ok(Package {
            name,
            category,
            opt,
            branch,
            load_command: cmd,
            for_types: types,
            build_command: build,
            local: is_local,
        })
    }

    pub fn into_yaml(self) -> Yaml {
        let mut doc = Hash::new();
        doc.insert(Yaml::from_str("name"), Yaml::from_str(&self.name));
        doc.insert(Yaml::from_str("category"), Yaml::from_str(&self.category));
        doc.insert(Yaml::from_str("opt"), Yaml::Boolean(self.opt));
        doc.insert(Yaml::from_str("local"), Yaml::Boolean(self.local));
        if let Some(ref c) = self.branch {
            doc.insert(Yaml::from_str("branch"), Yaml::from_str(c));
        }
        if let Some(ref c) = self.load_command {
            doc.insert(Yaml::from_str("on"), Yaml::from_str(c));
        }
        if let Some(ref c) = self.build_command {
            doc.insert(Yaml::from_str("build"), Yaml::from_str(c));
        }
        if !self.for_types.is_empty() {
            let types = self
                .for_types
                .iter()
                .map(|e| Yaml::from_str(e))
                .collect::<Vec<Yaml>>();
            doc.insert(Yaml::from_str("for"), Yaml::Array(types));
        }
        Yaml::Hash(doc)
    }

    #[inline]
    fn basename(&self) -> &str {
        Path::new(&self.name)
            .file_name()
            .iter()
            .find_map(|e| e.to_str())
            .unwrap_or("")
    }

    pub fn path(&self) -> PathBuf {
        let repo = if self.local {
            self.basename()
        } else {
            let (_, repo) = self.repo();
            repo
        };
        let folder = if self.opt {
            "opt"
        } else {
            "start"
        };
        PACK_DIR.join(&self.category).join(folder).join(repo)
    }

    pub fn config_path(&self) -> PathBuf {
        let name = if self.local {
            self.basename().to_string()
        } else {
            self.name.replace('/', "-")
        };
        let name = if name.ends_with(".vim") {
            name
        } else {
            format!("{}.vim", &name)
        };
        PACK_CONFIG_DIR.join(name)
    }

    pub fn repo(&self) -> (&str, &str) {
        let mut info: Vec<&str> = self.name.splitn(2, '/').collect();
        info.reverse();

        let repo = info.first().unwrap_or(&"");
        let user = info.first().unwrap_or(&"");

        (user, repo)
    }

    pub fn try_build(&self) -> Result<()> {
        if let Some(ref c) = self.build_command {
            let path = self.path();
            let p = process::Command::new("sh")
                .arg("-c")
                .arg(c)
                .stdout(process::Stdio::piped())
                .stderr(process::Stdio::piped())
                .current_dir(&path)
                .spawn()?;
            let output = p.wait_with_output()?;
            if !output.status.success() {
                let err = String::from_utf8(output.stderr)
                    .unwrap_or_else(|_| String::from("No error output!"));
                return Err(Error::Build(err));
            }
        }
        Ok(())
    }
}

impl fmt::Display for Package {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = if self.opt { "opt" } else { "start" };
        let on = match self.load_command {
            Some(ref c) => format!(" [Load on `{c}`]"),
            None => "".to_string(),
        };

        let types = if !self.for_types.is_empty() {
            let types = self.for_types.join(",");
            format!(" [For {types}]")
        } else {
            "".to_string()
        };
        write!(
            f,
            "{} => pack/{}/{}{}{}",
            &self.name, &self.category, name, on, types
        )
    }
}

/**
 * Load the default packfile if one is available.
 */
pub fn fetch() -> Result<Vec<Package>> {
    if PACK_FILE.is_file() {
        fetch_from_packfile(&*PACK_FILE)
            .map_err(|e| Error::PackFile(format!("Fail to parse packfile: {e}")))
    } else {
        Ok(vec![])
    }
}

/**
 * Load the packfile and fetch all the stored packages
 */
fn fetch_from_packfile<P: AsRef<Path>>(packfile: P) -> Result<Vec<Package>> {
    let mut data = String::new();
    File::open(packfile.as_ref())?.read_to_string(&mut data)?;
    let docs = YamlLoader::load_from_str(&data)?;

    let mut ret = Vec::new();
    if !docs.is_empty() {
        if let Some(doc) = docs[0].as_vec() {
            for d in doc {
                ret.push(Package::from_yaml(d)?);
            }
        }
    }
    Ok(ret)
}

pub fn save(packs: Vec<Package>) -> Result<()> {
    let packs = packs
        .into_iter()
        .map(|e| e.into_yaml())
        .collect::<Vec<Yaml>>();
    let doc = Yaml::Array(packs);
    let mut out = String::new();
    {
        let mut emitter = YamlEmitter::new(&mut out);
        emitter.dump(&doc)?;
    }
    if !PACK_CONFIG_DIR.is_dir() {
        fs::create_dir_all(&*PACK_CONFIG_DIR)?;
    }
    let mut f = File::create(&*PACK_FILE)?;
    f.write_all(PACKFILE_HEADER)?;
    f.write_all(out.as_bytes())?;
    Ok(())
}

pub fn update_pack_plugin(packs: &[Package]) -> Result<()> {
    if !PACK_PLUGIN_DIR.is_dir() {
        fs::create_dir_all(&*PACK_PLUGIN_DIR)?;
    }

    let mut plugin_file = File::create(PACK_PLUGIN_DIR.join(PACK_PLUGIN_FILE))?;
    plugin_file.write_all(format!("{PLUGIN_HEADER}\n\n").as_bytes())?;

    let mut buf = String::new();
    for (pkg, path) in packs.iter().map(|x| (x, x.config_path())) {
        buf.clear();
        let mut written = false;

        if let Some(ref cmd) = pkg.load_command {
            plugin_file.write_all(format!("\" {}\n", &pkg.name).as_bytes())?;
            written = true;
            let (_, repo) = pkg.repo();
            let msg = format!(
                "command! -nargs=* -range -bang {cmd} packadd {repo} | \
                 call s:do_cmd('{cmd}', \"<bang>\", <line1>, <line2>, <q-args>)\n\n"
            );
            plugin_file.write_all(msg.as_bytes())?;
        }

        if !pkg.for_types.is_empty() {
            if !written {
                plugin_file.write_all(format!("\" {}\n", &pkg.name).as_bytes())?;
                written = true;
            }
            let (_, repo) = pkg.repo();
            let types = pkg.for_types.join(",");
            let msg = format!("autocmd FileType {types} packadd {repo}\n\n");
            plugin_file.write_all(msg.as_bytes())?;
        }

        if path.is_file() {
            File::open(&path)?.read_to_string(&mut buf)?;
            if !written {
                plugin_file.write_all(format!("\" {}\n", &pkg.name).as_bytes())?;
            }
            plugin_file.write_all(format!("{}\n", &buf).as_bytes())?;
        }
    }
    Ok(())
}

fn read_dir<H>(dir: &Path, mut action: H) -> Result<()>
where
    H: FnMut(&Path, String) -> Result<()>,
{
    if !dir.is_dir() {
        return Ok(());
    }
    for entry in (dir.read_dir()?).flatten() {
        let sub = entry.path();
        let item = match sub.file_name().iter().flat_map(|s| s.to_str()).next() {
            None => continue,
            Some(i) => i.to_string(),
        };
        if sub.is_dir() && !item.starts_with('.') {
            action(&sub, item)?;
        }
    }
    Ok(())
}

pub fn walk_packs<F>(category: &Option<String>, start: bool, opt: bool, callback: F) -> Result<()>
where
    F: Fn(&str, &str, &str),
{
    read_dir(&PACK_DIR, |path, cate| {
        let is_match = category.as_ref().map_or(true, |c| *c == cate);
        if is_match {
            read_dir(path, |subpath, option| {
                if (start && option != "start")
                    || (opt && option != "opt")
                    || (option != "start" && option != "opt")
                {
                    Ok(())
                } else {
                    read_dir(subpath, |_, name| {
                        callback(&cate, &option, &name);
                        Ok(())
                    })
                }
            })
        } else {
            Ok(())
        }
    })?;
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn package_path_user_repo() {
        let p = Package::new("user/reponame", "", false);
        let exp = PACK_DIR.join("start").join("reponame");
        assert_eq!(exp, p.path());
    }

    #[test]
    fn package_path_nouser() {
        let p = Package::new("reponame", "", false);
        let exp = PACK_DIR.join("start").join("reponame");
        assert_eq!(exp, p.path());
    }

    #[test]
    fn package_path_repo_slash() {
        let p = Package::new("user/reponame/with_slash", "", false);
        let exp = PACK_DIR.join("start").join("reponame/with_slash");
        assert_eq!(exp, p.path());
    }
}
